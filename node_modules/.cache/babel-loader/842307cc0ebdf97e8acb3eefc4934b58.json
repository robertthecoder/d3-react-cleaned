{"ast":null,"code":"import _slicedToArray from \"/Users/rj/Documents/0. coding-project/d3-react/using-react-hooks-with-d3/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n/**\n * Hook, that returns the current dimensions of an HTML element.\n * Doesn't play well with SVG.\n */\n\nconst useResizeObserver = ref => {\n  const _useState = useState(null),\n        _useState2 = _slicedToArray(_useState, 2),\n        dimensions = _useState2[0],\n        setDimensions = _useState2[1];\n\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;","map":{"version":3,"sources":["/Users/rj/Documents/0. coding-project/d3-react/using-react-hooks-with-d3/src/useResizeObserver.js"],"names":["useEffect","useState","ResizeObserver","useResizeObserver","ref","dimensions","setDimensions","observeTarget","current","resizeObserver","entries","forEach","entry","contentRect","observe","unobserve"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AAEA;;;;;AAKA,MAAMC,iBAAiB,GAAGC,GAAG,IAAI;AAAA,oBACKH,QAAQ,CAAC,IAAD,CADb;AAAA;AAAA,QACxBI,UADwB;AAAA,QACZC,aADY;;AAE/BN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMO,aAAa,GAAGH,GAAG,CAACI,OAA1B;AACA,UAAMC,cAAc,GAAG,IAAIP,cAAJ,CAAmBQ,OAAO,IAAI;AACnDA,MAAAA,OAAO,CAACC,OAAR,CAAgBC,KAAK,IAAI;AACvBN,QAAAA,aAAa,CAACM,KAAK,CAACC,WAAP,CAAb;AACD,OAFD;AAGD,KAJsB,CAAvB;AAKAJ,IAAAA,cAAc,CAACK,OAAf,CAAuBP,aAAvB;AACA,WAAO,MAAM;AACXE,MAAAA,cAAc,CAACM,SAAf,CAAyBR,aAAzB;AACD,KAFD;AAGD,GAXQ,EAWN,CAACH,GAAD,CAXM,CAAT;AAYA,SAAOC,UAAP;AACD,CAfD;;AAiBA,eAAeF,iBAAf","sourcesContent":["import { useEffect, useState } from \"react\";\nimport ResizeObserver from \"resize-observer-polyfill\";\n\n/**\n * Hook, that returns the current dimensions of an HTML element.\n * Doesn't play well with SVG.\n */\n\nconst useResizeObserver = ref => {\n  const [dimensions, setDimensions] = useState(null);\n  useEffect(() => {\n    const observeTarget = ref.current;\n    const resizeObserver = new ResizeObserver(entries => {\n      entries.forEach(entry => {\n        setDimensions(entry.contentRect);\n      });\n    });\n    resizeObserver.observe(observeTarget);\n    return () => {\n      resizeObserver.unobserve(observeTarget);\n    };\n  }, [ref]);\n  return dimensions;\n};\n\nexport default useResizeObserver;\n"]},"metadata":{},"sourceType":"module"}
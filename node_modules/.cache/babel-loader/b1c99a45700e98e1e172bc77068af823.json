{"ast":null,"code":"var _jsxFileName = \"/Users/rj/Documents/0. coding-project/d3-react/using-react-hooks-with-d3/src/Finale.js\";\nimport React, { useEffect, useRef } from \"react\";\nimport { select, scaleLinear, line, max, curveCardinal } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n/**\n * Component that sums up the most important things to take away from this series.\n */\n\nfunction Finale({\n  data\n}) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef); // will be called initially and on every data change\n\n  useEffect(() => {\n    const svg = select(svgRef.current);\n\n    const _ref = dimensions || wrapperRef.current.getBoundingClientRect(),\n          width = _ref.width,\n          height = _ref.height; // general update pattern (join):\n\n\n    svg.selectAll(\".circle1\").data(data).join(\"circle\") // returns a selection for both entering/updating circles, removes unnecessary circles\n    .attr(\"class\", \"circle1\").attr(\"fill\", \"orange\").attr(\"cx\", (value, index) => index * 20).attr(\"cy\", 10).attr(\"r\", 5); // general update pattern (old)\n    // circles2 = summary about entering/updating/exiting circles,\n    // but returns the updating (existing) ones per default\n\n    const circles2 = svg.selectAll(\".circle2\").data(data);\n    circles2.enter() // get the entering (new) circles from (enter/update/exit) summary\n    .append(\"circle\") // create a new circle for entering (new) piece of data\n    .merge(circles2) // merge the \"entering circles\" with \"existing\" circles\n    .attr(\"fill\", \"red\").attr(\"class\", \"circle2\") // then apply all the things to the combined group\n    .attr(\"cx\", (value, index) => index * 20).attr(\"cy\", 30).attr(\"r\", 5);\n    circles2.exit().remove(); // remove exiting circles\n    // scales, and other generators\n\n    const xScale = scaleLinear().domain([0, data.length - 1]).range([0, width]);\n    const yScale = scaleLinear().domain([0, max(data)]).range([height, 0]);\n    const lineGenerator = line().x((value, index) => xScale(index)).y(yScale).curve(curveCardinal);\n    svg.selectAll(\".line\").data([data]).join(\"path\").attr(\"class\", \"line\").attr(\"stroke\", \"black\").attr(\"fill\", \"none\").attr(\"d\", lineGenerator);\n  }, [data, dimensions]);\n  return React.createElement(React.Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    ref: wrapperRef,\n    style: {\n      marginBottom: \"2rem\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    ref: svgRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }, React.createElement(\"g\", {\n    className: \"x-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(\"g\", {\n    className: \"y-axis\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }))));\n}\n\nexport default Finale;","map":{"version":3,"sources":["/Users/rj/Documents/0. coding-project/d3-react/using-react-hooks-with-d3/src/Finale.js"],"names":["React","useEffect","useRef","select","scaleLinear","line","max","curveCardinal","useResizeObserver","Finale","data","svgRef","wrapperRef","dimensions","svg","current","getBoundingClientRect","width","height","selectAll","join","attr","value","index","circles2","enter","append","merge","exit","remove","xScale","domain","length","range","yScale","lineGenerator","x","y","curve","marginBottom"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport { select, scaleLinear, line, max, curveCardinal } from \"d3\";\nimport useResizeObserver from \"./useResizeObserver\";\n\n/**\n * Component that sums up the most important things to take away from this series.\n */\n\nfunction Finale({ data }) {\n  const svgRef = useRef();\n  const wrapperRef = useRef();\n  const dimensions = useResizeObserver(wrapperRef);\n\n  // will be called initially and on every data change\n  useEffect(() => {\n    const svg = select(svgRef.current);\n    const { width, height } =\n      dimensions || wrapperRef.current.getBoundingClientRect();\n\n    // general update pattern (join):\n    svg\n      .selectAll(\".circle1\")\n      .data(data)\n      .join(\"circle\") // returns a selection for both entering/updating circles, removes unnecessary circles\n      .attr(\"class\", \"circle1\")\n      .attr(\"fill\", \"orange\")\n      .attr(\"cx\", (value, index) => index * 20)\n      .attr(\"cy\", 10)\n      .attr(\"r\", 5);\n\n    // general update pattern (old)\n    // circles2 = summary about entering/updating/exiting circles,\n    // but returns the updating (existing) ones per default\n    const circles2 = svg.selectAll(\".circle2\").data(data);\n\n    circles2\n      .enter() // get the entering (new) circles from (enter/update/exit) summary\n      .append(\"circle\") // create a new circle for entering (new) piece of data\n      .merge(circles2) // merge the \"entering circles\" with \"existing\" circles\n      .attr(\"fill\", \"red\")\n      .attr(\"class\", \"circle2\") // then apply all the things to the combined group\n      .attr(\"cx\", (value, index) => index * 20)\n      .attr(\"cy\", 30)\n      .attr(\"r\", 5);\n\n    circles2.exit().remove(); // remove exiting circles\n\n    // scales, and other generators\n    const xScale = scaleLinear()\n      .domain([0, data.length - 1])\n      .range([0, width]);\n\n    const yScale = scaleLinear()\n      .domain([0, max(data)])\n      .range([height, 0]);\n\n    const lineGenerator = line()\n      .x((value, index) => xScale(index))\n      .y(yScale)\n      .curve(curveCardinal);\n\n    svg\n      .selectAll(\".line\")\n      .data([data])\n      .join(\"path\")\n      .attr(\"class\", \"line\")\n      .attr(\"stroke\", \"black\")\n      .attr(\"fill\", \"none\")\n      .attr(\"d\", lineGenerator);\n  }, [data, dimensions]);\n\n  return (\n    <React.Fragment>\n      <div ref={wrapperRef} style={{ marginBottom: \"2rem\" }}>\n        <svg ref={svgRef}>\n          <g className=\"x-axis\" />\n          <g className=\"y-axis\" />\n        </svg>\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default Finale;\n"]},"metadata":{},"sourceType":"module"}